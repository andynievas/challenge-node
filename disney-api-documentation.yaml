openapi: 3.0.1
info:
  description: "This is a sample Disney Movies and Characters server. For this sample, you need to use a private token., with the header: 'authorization': 'Bearer `token`' to run CRUD operations."
  version: 1.0.0
  title: Disney API with Nodejs by Andy Nievas
  contact:
    email: nievasandy73@gmail.com
tags:
  - name: character
    description: Everything about Disney Characters
  - name: movie
    description: Everything about Disney Movies
  - name: user
    description: Operations about user
paths:
  /movies:
    get:
      tags:
        - movie
      summary: Get all movies
      description: ""
      operationId: getMovies
      parameters:
        - name: name
          in: query
          description: Name of movie
          schema:
            type: string
        - name: genre
          in: query
          description: Genre of movie
          schema:
            type: string
        - name: order
          in: query
          description: Filter by order
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: ASC
      responses:
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Movie"
    post:
      tags:
        - movie
      summary: Create a Movie
      description: ""
      operationId: updatePet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
  /movies/{id}:
    patch:
      tags:
        - movie
      summary: Update an existing Movie
      description: ""
      operationId: updateMovie
      parameters:
        - name: id
          in: path
          description: Name of movie
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        "200":
          description: Ok
        "400":
          description: Invalid input
    delete:
      tags:
        - movie
      summary: Delete a Movie
      description: ""
      operationId: deleteMovie
      parameters:
        - name: id
          in: path
          description: Name of movie
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Ok
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
  /characters:
    get:
      tags:
        - character
      summary: Get Characters
      description: ""
      operationId: placeCharacter
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Character"
            application/json:
              schema:
                $ref: "#/components/schemas/Character"
        "400":
          description: Invalid Character
    post:
      tags:
        - character
      summary: Create a new character
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Character"
        description: Info to new Character
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: error
  "/characters/{characterName}":
    patch:
      tags:
        - character
      summary: Update character info
      description: For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getCharacterById
      parameters:
        - name: characterName
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Character"
        description: Details to update Character
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Character"
            application/json:
              schema:
                $ref: "#/components/schemas/Character"
        "400":
          description: Invalid ID supplied
        "404":
          description: Character not found
    delete:
      tags:
        - character
      summary: Delete character
      description: For valid response try integer IDs with positive integer value. Negative
        or non-integer values will generate API errors
      operationId: deleteCharacter
      parameters:
        - name: characterName
          in: path
          description: ID of the character that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Character not found

  /auth/register:
    post:
      tags:
        - user
      summary: Create User
      description: ""
      operationId: registerUser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Ok
        "400":
          description: Username supplied already exists
  /auth/login:
    post:
      tags:
        - user
      summary: Get an access_token
      description: "Get an access_token for CRUD operations"
      operationId: loginUser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                properties:
                  status:
                    type: string
                    description: Ok
                  access_token:
                    type: string
                    description: token
        "400":
          description: Invalid username/password supplied
externalDocs:
  description: Find out more about Author
  url: http://linkedin.com/in/andy-nievas
components:
  schemas:
    Character:
      type: object
      properties:
        name:
          type: string
        image:
          type: string
          description: Image URL
        age:
          type: integer
        weight_value:
          type: integer
        weight_unit:
          type: string
          default: Kg
        story:
          type: string
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    Movie:
      type: object
      properties:
        title:
          type: string
        image:
          type: string
        release_date:
          type: string
        rating:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
          default: 3
